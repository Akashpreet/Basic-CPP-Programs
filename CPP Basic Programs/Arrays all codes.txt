All codes provided by Programmers of cuiet:
join officail telegram: https://t.me/cuiet_progg
--------------------------------------------------------

Array Sum
#include<iostream>

using namespace std;
// array sum
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for (int i=0;i<n;i++){
        cin>>arr[i];
    }
    int sum=0;
    for (int i=0;i<n;i++){
        sum =sum+arr[i];
    }
    cout<<sum;
}

__________________________________________________________

Linear Search

int linearSearch(int *arr, int n, int x)
{
    for (int i=0;i<n;i++){
        if (arr[i]==x){
            return i;
        }
    }
    return -1;
}
___________________________________________________________
Arrange Numbers in Array

void arrange(int *arr, int n)
{
        int i=0,j=n-1;
    int x=1;
    while(i<=j){
        arr[i]=x;
        x++;
        if (i==j){}
        else{
           arr[j]=x; 
        }
        
        x++;
        i++;
        j--;
    }
    /*for (int a=0;a<n;a++){
        cout<<arr[a]<<" ";
    }
    cout<<endl;*/
}
_____________________________________________________________
Swap Alternate

void swapAlternate(int *arr, int n)
{
    for (int i=0;i<n-1;i=i+2){
        int temp=arr[i];
        arr[i]=arr[i+1];
        arr[i+1]=temp;
    }
    
}
_____________________________________________________________

Find Unique

int findUnique(int *arr, int n)
{
        for(int i=0;i<n;i++){
        bool unique=true;
        for(int j=0;j<n;j++){
            if (i==j){
                continue;
            }
            if (arr[i]==arr[j]){
                unique=false;
                break;
            }
            
        }
        if (unique){
            return arr[i];
        }
        
    }
    return 0;

}
___________________________________________________________

Find Duplicate
int duplicateNumber(int *arr, int n)
{
        for(int i=0;i<n;i++){
        bool unique=true;
        for(int j=0;j<n;j++){
            if (i==j){
                continue;
            }
            if (arr[i]==arr[j]){
                unique=false;
                break;
            }
            
        }
        if (!unique){
            return arr[i];
        }
        
    }
    return 0;
}
___________________________________________________________
Array Intersection
#include <climits>

void intersection(int *arr, int *arr2, int n, int m)
{
    
    //cout<<m<<n;
    for (int i=0;i<n;i++){
        for(int j=0;j<m+1;j++){
            if (arr[i]==arr2[j]){
                cout<<arr[i]<<" ";
                arr2[j]=INT_MIN;
                arr[i]=INT_MAX;
                
            }
            
        }
        
        
    }
}
_________________________________________________________
Pair Sum
int pairSum(int *arr, int n, int x)
{
	int sum=0;
    for (int i=0;i<n;i++){
        for (int j=i+1;j<n;j++){
            if (arr[i]+arr[j]==x){
                sum=sum+1;
            }
        }
    }
    return sum;
}
_______________________________________________________
Triplet Sum

int tripletSum(int *arr, int n, int x)
{
	    int sum=0;
    for (int i=0;i<n+1;i++){
        for (int j=i+1;j<n;j++){
            
            for (int k=j+1;k<n;k++){
                if(arr[i]+arr[k]+arr[j]==x){
            
                 sum=sum+1;
                }
            }
            
            }
        }
    
    return sum;
}
________________________________________________________
Sort 0 1

void sortZeroesAndOne(int *arr, int n)
{
    //Write your code here
    int next_zero=0,i =0;
    while(i<n){
        if (arr[i]==0){
            int temp=arr[next_zero];
            arr[next_zero]=arr[i];
            arr[i]=temp;
            next_zero++;
        }
        i++;
    }
}
-----------------------------------------------------------